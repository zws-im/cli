name: CI

on: [push, pull_request]

jobs:
  build:
    name: Build

    runs-on: ubuntu-latest

    steps:
      - name: Checkout git repository
        uses: actions/checkout@v2
      - name: Get Yarn cache directory path
        id: yarn-cache-dir-path
        run: echo "::set-output name=dir::$(yarn config get cacheFolder)"
      - name: Cache dependencies
        uses: actions/cache@v2
        with:
          path: ${{ steps.yarn-cache-dir-path.outputs.dir }}
          key: ${{ runner.os }}-yarn-${{ hashFiles('**/yarn.lock') }}
          restore-keys: |
            ${{ runner.os }}-yarn-
      - name: Install dependencies with Yarn
        run: yarn install --immutable
      - name: Compile TypeScript
        run: yarn run build
      - name: Upload compiled TypeScript
        uses: actions/upload-artifact@v2
        with:
          name: tsc_output
          path: tsc_output
  lint-dockerfile:
    name: Lint Dockerfile

    runs-on: ubuntu-latest

    steps:
      - name: Checkout git repository
        uses: actions/checkout@v2
      - name: Lint Dockerfile
        uses: brpaz/hadolint-action@v1.3.1
        with:
          dockerfile: 'Dockerfile'
  style:
    name: Check style

    runs-on: ubuntu-latest

    steps:
      - name: Checkout git repository
        uses: actions/checkout@v2
      - name: Get Yarn cache directory path
        id: yarn-cache-dir-path
        run: echo "::set-output name=dir::$(yarn config get cacheFolder)"
      - name: Cache dependencies
        uses: actions/cache@v2
        with:
          path: ${{ steps.yarn-cache-dir-path.outputs.dir }}
          key: ${{ runner.os }}-yarn-${{ hashFiles('**/yarn.lock') }}
          restore-keys: |
            ${{ runner.os }}-yarn-
      - name: Install dependencies with Yarn
        run: yarn install --immutable
      - name: Check style
        run: yarn run style
  test-docker:
    name: Test Docker image

    runs-on: ubuntu-latest

    steps:
      - name: Checkout git repository
        uses: actions/checkout@v2
      - name: Set up QEMU
        uses: docker/setup-qemu-action@v1
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v1
      - name: Login to DockerHub
        uses: docker/login-action@v1
        with:
          username: pizzafox
          password: ${{ secrets.DOCKER_PASSWORD }}
      - name: Build
        id: docker_build
        uses: docker/build-push-action@v2
        with:
          pull: true
          tags: zws-im/cli:latest
      - name: Start
        run: docker run zwsim/cli
  deploy:
    name: Deploy

    runs-on: ubuntu-latest

    # Don't run this job if we aren't on master branch
    # `semantic-release` will do this automatically, but this saves us the time of building the image prior to that
    if: ${{ github.ref  == 'refs/heads/main' }}

    needs: [build, lint-dockerfile, test-docker]

    steps:
      - name: Checkout git repository
        uses: actions/checkout@v2
      - name: Get yarn cache
        id: yarn-cache
        run: echo "::set-output name=dir::$(yarn config get cacheFolder)"
      - name: Cache dependencies
        uses: actions/cache@v2
        with:
          path: ${{ steps.yarn-cache.outputs.dir }}
          key: ${{ runner.os }}-yarn-${{ hashFiles('**/yarn.lock') }}
          restore-keys: |
            ${{ runner.os }}-yarn-
      - name: Install dependencies with Yarn
        run: yarn install --immutable
      - name: Deploy
        run: yarn run deploy
        env:
          DOCKER_USERNAME: pizzafox
          DOCKER_PASSWORD: ${{ secrets.DOCKER_PASSWORD }}
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
